# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SbpProfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SbpProfile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'city': 'str',
            'country': 'str',
            'currency': 'str',
            'cvv': 'str',
            'email': 'str',
            'expirymmyy': 'str',
            'orderid': 'str',
            'partnerid': 'str',
            'partnerkey': 'str',
            'payeefirstname': 'str',
            'payeeid': 'str',
            'payeelastname': 'str',
            'paymentmode': 'str',
            'profileid': 'str',
            'routingnumber': 'str',
            'state': 'str',
            'tokenizedaccountnumber': 'str',
            'udfield1': 'str',
            'udfield2': 'str',
            'udfield3': 'str',
            'zip': 'str'
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country': 'country',
            'currency': 'currency',
            'cvv': 'cvv',
            'email': 'email',
            'expirymmyy': 'expirymmyy',
            'orderid': 'orderid',
            'partnerid': 'partnerid',
            'partnerkey': 'partnerkey',
            'payeefirstname': 'payeefirstname',
            'payeeid': 'payeeid',
            'payeelastname': 'payeelastname',
            'paymentmode': 'paymentmode',
            'profileid': 'profileid',
            'routingnumber': 'routingnumber',
            'state': 'state',
            'tokenizedaccountnumber': 'tokenizedaccountnumber',
            'udfield1': 'udfield1',
            'udfield2': 'udfield2',
            'udfield3': 'udfield3',
            'zip': 'zip'
        }

        self._address = None
        self._city = None
        self._country = None
        self._currency = None
        self._cvv = None
        self._email = None
        self._expirymmyy = None
        self._orderid = None
        self._partnerid = None
        self._partnerkey = None
        self._payeefirstname = None
        self._payeeid = None
        self._payeelastname = None
        self._paymentmode = None
        self._profileid = None
        self._routingnumber = None
        self._state = None
        self._tokenizedaccountnumber = None
        self._udfield1 = None
        self._udfield2 = None
        self._udfield3 = None
        self._zip = None

    @property
    def address(self):
        """
        Gets the address of this SbpProfile.


        :return: The address of this SbpProfile.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this SbpProfile.


        :param address: The address of this SbpProfile.
        :type: str
        """
        self._address = address

    @property
    def city(self):
        """
        Gets the city of this SbpProfile.


        :return: The city of this SbpProfile.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this SbpProfile.


        :param city: The city of this SbpProfile.
        :type: str
        """
        self._city = city

    @property
    def country(self):
        """
        Gets the country of this SbpProfile.


        :return: The country of this SbpProfile.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this SbpProfile.


        :param country: The country of this SbpProfile.
        :type: str
        """
        self._country = country

    @property
    def currency(self):
        """
        Gets the currency of this SbpProfile.


        :return: The currency of this SbpProfile.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this SbpProfile.


        :param currency: The currency of this SbpProfile.
        :type: str
        """
        self._currency = currency

    @property
    def cvv(self):
        """
        Gets the cvv of this SbpProfile.


        :return: The cvv of this SbpProfile.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """
        Sets the cvv of this SbpProfile.


        :param cvv: The cvv of this SbpProfile.
        :type: str
        """
        self._cvv = cvv

    @property
    def email(self):
        """
        Gets the email of this SbpProfile.


        :return: The email of this SbpProfile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this SbpProfile.


        :param email: The email of this SbpProfile.
        :type: str
        """
        self._email = email

    @property
    def expirymmyy(self):
        """
        Gets the expirymmyy of this SbpProfile.


        :return: The expirymmyy of this SbpProfile.
        :rtype: str
        """
        return self._expirymmyy

    @expirymmyy.setter
    def expirymmyy(self, expirymmyy):
        """
        Sets the expirymmyy of this SbpProfile.


        :param expirymmyy: The expirymmyy of this SbpProfile.
        :type: str
        """
        self._expirymmyy = expirymmyy

    @property
    def orderid(self):
        """
        Gets the orderid of this SbpProfile.


        :return: The orderid of this SbpProfile.
        :rtype: str
        """
        return self._orderid

    @orderid.setter
    def orderid(self, orderid):
        """
        Sets the orderid of this SbpProfile.


        :param orderid: The orderid of this SbpProfile.
        :type: str
        """
        self._orderid = orderid

    @property
    def partnerid(self):
        """
        Gets the partnerid of this SbpProfile.


        :return: The partnerid of this SbpProfile.
        :rtype: str
        """
        return self._partnerid

    @partnerid.setter
    def partnerid(self, partnerid):
        """
        Sets the partnerid of this SbpProfile.


        :param partnerid: The partnerid of this SbpProfile.
        :type: str
        """
        self._partnerid = partnerid

    @property
    def partnerkey(self):
        """
        Gets the partnerkey of this SbpProfile.


        :return: The partnerkey of this SbpProfile.
        :rtype: str
        """
        return self._partnerkey

    @partnerkey.setter
    def partnerkey(self, partnerkey):
        """
        Sets the partnerkey of this SbpProfile.


        :param partnerkey: The partnerkey of this SbpProfile.
        :type: str
        """
        self._partnerkey = partnerkey

    @property
    def payeefirstname(self):
        """
        Gets the payeefirstname of this SbpProfile.


        :return: The payeefirstname of this SbpProfile.
        :rtype: str
        """
        return self._payeefirstname

    @payeefirstname.setter
    def payeefirstname(self, payeefirstname):
        """
        Sets the payeefirstname of this SbpProfile.


        :param payeefirstname: The payeefirstname of this SbpProfile.
        :type: str
        """
        self._payeefirstname = payeefirstname

    @property
    def payeeid(self):
        """
        Gets the payeeid of this SbpProfile.


        :return: The payeeid of this SbpProfile.
        :rtype: str
        """
        return self._payeeid

    @payeeid.setter
    def payeeid(self, payeeid):
        """
        Sets the payeeid of this SbpProfile.


        :param payeeid: The payeeid of this SbpProfile.
        :type: str
        """
        self._payeeid = payeeid

    @property
    def payeelastname(self):
        """
        Gets the payeelastname of this SbpProfile.


        :return: The payeelastname of this SbpProfile.
        :rtype: str
        """
        return self._payeelastname

    @payeelastname.setter
    def payeelastname(self, payeelastname):
        """
        Sets the payeelastname of this SbpProfile.


        :param payeelastname: The payeelastname of this SbpProfile.
        :type: str
        """
        self._payeelastname = payeelastname

    @property
    def paymentmode(self):
        """
        Gets the paymentmode of this SbpProfile.


        :return: The paymentmode of this SbpProfile.
        :rtype: str
        """
        return self._paymentmode

    @paymentmode.setter
    def paymentmode(self, paymentmode):
        """
        Sets the paymentmode of this SbpProfile.


        :param paymentmode: The paymentmode of this SbpProfile.
        :type: str
        """
        self._paymentmode = paymentmode

    @property
    def profileid(self):
        """
        Gets the profileid of this SbpProfile.


        :return: The profileid of this SbpProfile.
        :rtype: str
        """
        return self._profileid

    @profileid.setter
    def profileid(self, profileid):
        """
        Sets the profileid of this SbpProfile.


        :param profileid: The profileid of this SbpProfile.
        :type: str
        """
        self._profileid = profileid

    @property
    def routingnumber(self):
        """
        Gets the routingnumber of this SbpProfile.


        :return: The routingnumber of this SbpProfile.
        :rtype: str
        """
        return self._routingnumber

    @routingnumber.setter
    def routingnumber(self, routingnumber):
        """
        Sets the routingnumber of this SbpProfile.


        :param routingnumber: The routingnumber of this SbpProfile.
        :type: str
        """
        self._routingnumber = routingnumber

    @property
    def state(self):
        """
        Gets the state of this SbpProfile.


        :return: The state of this SbpProfile.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this SbpProfile.


        :param state: The state of this SbpProfile.
        :type: str
        """
        self._state = state

    @property
    def tokenizedaccountnumber(self):
        """
        Gets the tokenizedaccountnumber of this SbpProfile.


        :return: The tokenizedaccountnumber of this SbpProfile.
        :rtype: str
        """
        return self._tokenizedaccountnumber

    @tokenizedaccountnumber.setter
    def tokenizedaccountnumber(self, tokenizedaccountnumber):
        """
        Sets the tokenizedaccountnumber of this SbpProfile.


        :param tokenizedaccountnumber: The tokenizedaccountnumber of this SbpProfile.
        :type: str
        """
        self._tokenizedaccountnumber = tokenizedaccountnumber

    @property
    def udfield1(self):
        """
        Gets the udfield1 of this SbpProfile.


        :return: The udfield1 of this SbpProfile.
        :rtype: str
        """
        return self._udfield1

    @udfield1.setter
    def udfield1(self, udfield1):
        """
        Sets the udfield1 of this SbpProfile.


        :param udfield1: The udfield1 of this SbpProfile.
        :type: str
        """
        self._udfield1 = udfield1

    @property
    def udfield2(self):
        """
        Gets the udfield2 of this SbpProfile.


        :return: The udfield2 of this SbpProfile.
        :rtype: str
        """
        return self._udfield2

    @udfield2.setter
    def udfield2(self, udfield2):
        """
        Sets the udfield2 of this SbpProfile.


        :param udfield2: The udfield2 of this SbpProfile.
        :type: str
        """
        self._udfield2 = udfield2

    @property
    def udfield3(self):
        """
        Gets the udfield3 of this SbpProfile.


        :return: The udfield3 of this SbpProfile.
        :rtype: str
        """
        return self._udfield3

    @udfield3.setter
    def udfield3(self, udfield3):
        """
        Sets the udfield3 of this SbpProfile.


        :param udfield3: The udfield3 of this SbpProfile.
        :type: str
        """
        self._udfield3 = udfield3

    @property
    def zip(self):
        """
        Gets the zip of this SbpProfile.


        :return: The zip of this SbpProfile.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this SbpProfile.


        :param zip: The zip of this SbpProfile.
        :type: str
        """
        self._zip = zip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

