# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SbpRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SbpRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'city': 'str',
            'country': 'str',
            'currency': 'str',
            'cvv': 'str',
            'email': 'str',
            'expirymmyy': 'str',
            'orderid': 'str',
            'partnerid': 'str',
            'partnerkey': 'str',
            'payeefirstname': 'str',
            'payeeid': 'str',
            'payeelastname': 'str',
            'paymentmode': 'str',
            'profile': 'str',
            'profileid': 'str',
            'routingnumber': 'str',
            'state': 'str',
            'surchargeamount': 'str',
            'tokenizedaccountnumber': 'str',
            'transactionamount': 'str',
            'transactionreference': 'str',
            'transactiontype': 'str',
            'udfield1': 'str',
            'udfield2': 'str',
            'udfield3': 'str',
            'zip': 'str'
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country': 'country',
            'currency': 'currency',
            'cvv': 'cvv',
            'email': 'email',
            'expirymmyy': 'expirymmyy',
            'orderid': 'orderid',
            'partnerid': 'partnerid',
            'partnerkey': 'partnerkey',
            'payeefirstname': 'payeefirstname',
            'payeeid': 'payeeid',
            'payeelastname': 'payeelastname',
            'paymentmode': 'paymentmode',
            'profile': 'profile',
            'profileid': 'profileid',
            'routingnumber': 'routingnumber',
            'state': 'state',
            'surchargeamount': 'surchargeamount',
            'tokenizedaccountnumber': 'tokenizedaccountnumber',
            'transactionamount': 'transactionamount',
            'transactionreference': 'transactionreference',
            'transactiontype': 'transactiontype',
            'udfield1': 'udfield1',
            'udfield2': 'udfield2',
            'udfield3': 'udfield3',
            'zip': 'zip'
        }

        self._address = None
        self._city = None
        self._country = None
        self._currency = None
        self._cvv = None
        self._email = None
        self._expirymmyy = None
        self._orderid = None
        self._partnerid = None
        self._partnerkey = None
        self._payeefirstname = None
        self._payeeid = None
        self._payeelastname = None
        self._paymentmode = None
        self._profile = None
        self._profileid = None
        self._routingnumber = None
        self._state = None
        self._surchargeamount = None
        self._tokenizedaccountnumber = None
        self._transactionamount = None
        self._transactionreference = None
        self._transactiontype = None
        self._udfield1 = None
        self._udfield2 = None
        self._udfield3 = None
        self._zip = None

    @property
    def address(self):
        """
        Gets the address of this SbpRequest.


        :return: The address of this SbpRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this SbpRequest.


        :param address: The address of this SbpRequest.
        :type: str
        """
        self._address = address

    @property
    def city(self):
        """
        Gets the city of this SbpRequest.


        :return: The city of this SbpRequest.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this SbpRequest.


        :param city: The city of this SbpRequest.
        :type: str
        """
        self._city = city

    @property
    def country(self):
        """
        Gets the country of this SbpRequest.


        :return: The country of this SbpRequest.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this SbpRequest.


        :param country: The country of this SbpRequest.
        :type: str
        """
        self._country = country

    @property
    def currency(self):
        """
        Gets the currency of this SbpRequest.


        :return: The currency of this SbpRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this SbpRequest.


        :param currency: The currency of this SbpRequest.
        :type: str
        """
        self._currency = currency

    @property
    def cvv(self):
        """
        Gets the cvv of this SbpRequest.


        :return: The cvv of this SbpRequest.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """
        Sets the cvv of this SbpRequest.


        :param cvv: The cvv of this SbpRequest.
        :type: str
        """
        self._cvv = cvv

    @property
    def email(self):
        """
        Gets the email of this SbpRequest.


        :return: The email of this SbpRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this SbpRequest.


        :param email: The email of this SbpRequest.
        :type: str
        """
        self._email = email

    @property
    def expirymmyy(self):
        """
        Gets the expirymmyy of this SbpRequest.


        :return: The expirymmyy of this SbpRequest.
        :rtype: str
        """
        return self._expirymmyy

    @expirymmyy.setter
    def expirymmyy(self, expirymmyy):
        """
        Sets the expirymmyy of this SbpRequest.


        :param expirymmyy: The expirymmyy of this SbpRequest.
        :type: str
        """
        self._expirymmyy = expirymmyy

    @property
    def orderid(self):
        """
        Gets the orderid of this SbpRequest.


        :return: The orderid of this SbpRequest.
        :rtype: str
        """
        return self._orderid

    @orderid.setter
    def orderid(self, orderid):
        """
        Sets the orderid of this SbpRequest.


        :param orderid: The orderid of this SbpRequest.
        :type: str
        """
        self._orderid = orderid

    @property
    def partnerid(self):
        """
        Gets the partnerid of this SbpRequest.


        :return: The partnerid of this SbpRequest.
        :rtype: str
        """
        return self._partnerid

    @partnerid.setter
    def partnerid(self, partnerid):
        """
        Sets the partnerid of this SbpRequest.


        :param partnerid: The partnerid of this SbpRequest.
        :type: str
        """
        self._partnerid = partnerid

    @property
    def partnerkey(self):
        """
        Gets the partnerkey of this SbpRequest.


        :return: The partnerkey of this SbpRequest.
        :rtype: str
        """
        return self._partnerkey

    @partnerkey.setter
    def partnerkey(self, partnerkey):
        """
        Sets the partnerkey of this SbpRequest.


        :param partnerkey: The partnerkey of this SbpRequest.
        :type: str
        """
        self._partnerkey = partnerkey

    @property
    def payeefirstname(self):
        """
        Gets the payeefirstname of this SbpRequest.


        :return: The payeefirstname of this SbpRequest.
        :rtype: str
        """
        return self._payeefirstname

    @payeefirstname.setter
    def payeefirstname(self, payeefirstname):
        """
        Sets the payeefirstname of this SbpRequest.


        :param payeefirstname: The payeefirstname of this SbpRequest.
        :type: str
        """
        self._payeefirstname = payeefirstname

    @property
    def payeeid(self):
        """
        Gets the payeeid of this SbpRequest.


        :return: The payeeid of this SbpRequest.
        :rtype: str
        """
        return self._payeeid

    @payeeid.setter
    def payeeid(self, payeeid):
        """
        Sets the payeeid of this SbpRequest.


        :param payeeid: The payeeid of this SbpRequest.
        :type: str
        """
        self._payeeid = payeeid

    @property
    def payeelastname(self):
        """
        Gets the payeelastname of this SbpRequest.


        :return: The payeelastname of this SbpRequest.
        :rtype: str
        """
        return self._payeelastname

    @payeelastname.setter
    def payeelastname(self, payeelastname):
        """
        Sets the payeelastname of this SbpRequest.


        :param payeelastname: The payeelastname of this SbpRequest.
        :type: str
        """
        self._payeelastname = payeelastname

    @property
    def paymentmode(self):
        """
        Gets the paymentmode of this SbpRequest.


        :return: The paymentmode of this SbpRequest.
        :rtype: str
        """
        return self._paymentmode

    @paymentmode.setter
    def paymentmode(self, paymentmode):
        """
        Sets the paymentmode of this SbpRequest.


        :param paymentmode: The paymentmode of this SbpRequest.
        :type: str
        """
        self._paymentmode = paymentmode

    @property
    def profile(self):
        """
        Gets the profile of this SbpRequest.


        :return: The profile of this SbpRequest.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this SbpRequest.


        :param profile: The profile of this SbpRequest.
        :type: str
        """
        self._profile = profile

    @property
    def profileid(self):
        """
        Gets the profileid of this SbpRequest.


        :return: The profileid of this SbpRequest.
        :rtype: str
        """
        return self._profileid

    @profileid.setter
    def profileid(self, profileid):
        """
        Sets the profileid of this SbpRequest.


        :param profileid: The profileid of this SbpRequest.
        :type: str
        """
        self._profileid = profileid

    @property
    def routingnumber(self):
        """
        Gets the routingnumber of this SbpRequest.


        :return: The routingnumber of this SbpRequest.
        :rtype: str
        """
        return self._routingnumber

    @routingnumber.setter
    def routingnumber(self, routingnumber):
        """
        Sets the routingnumber of this SbpRequest.


        :param routingnumber: The routingnumber of this SbpRequest.
        :type: str
        """
        self._routingnumber = routingnumber

    @property
    def state(self):
        """
        Gets the state of this SbpRequest.


        :return: The state of this SbpRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this SbpRequest.


        :param state: The state of this SbpRequest.
        :type: str
        """
        self._state = state

    @property
    def surchargeamount(self):
        """
        Gets the surchargeamount of this SbpRequest.


        :return: The surchargeamount of this SbpRequest.
        :rtype: str
        """
        return self._surchargeamount

    @surchargeamount.setter
    def surchargeamount(self, surchargeamount):
        """
        Sets the surchargeamount of this SbpRequest.


        :param surchargeamount: The surchargeamount of this SbpRequest.
        :type: str
        """
        self._surchargeamount = surchargeamount

    @property
    def tokenizedaccountnumber(self):
        """
        Gets the tokenizedaccountnumber of this SbpRequest.


        :return: The tokenizedaccountnumber of this SbpRequest.
        :rtype: str
        """
        return self._tokenizedaccountnumber

    @tokenizedaccountnumber.setter
    def tokenizedaccountnumber(self, tokenizedaccountnumber):
        """
        Sets the tokenizedaccountnumber of this SbpRequest.


        :param tokenizedaccountnumber: The tokenizedaccountnumber of this SbpRequest.
        :type: str
        """
        self._tokenizedaccountnumber = tokenizedaccountnumber

    @property
    def transactionamount(self):
        """
        Gets the transactionamount of this SbpRequest.


        :return: The transactionamount of this SbpRequest.
        :rtype: str
        """
        return self._transactionamount

    @transactionamount.setter
    def transactionamount(self, transactionamount):
        """
        Sets the transactionamount of this SbpRequest.


        :param transactionamount: The transactionamount of this SbpRequest.
        :type: str
        """
        self._transactionamount = transactionamount

    @property
    def transactionreference(self):
        """
        Gets the transactionreference of this SbpRequest.


        :return: The transactionreference of this SbpRequest.
        :rtype: str
        """
        return self._transactionreference

    @transactionreference.setter
    def transactionreference(self, transactionreference):
        """
        Sets the transactionreference of this SbpRequest.


        :param transactionreference: The transactionreference of this SbpRequest.
        :type: str
        """
        self._transactionreference = transactionreference

    @property
    def transactiontype(self):
        """
        Gets the transactiontype of this SbpRequest.


        :return: The transactiontype of this SbpRequest.
        :rtype: str
        """
        return self._transactiontype

    @transactiontype.setter
    def transactiontype(self, transactiontype):
        """
        Sets the transactiontype of this SbpRequest.


        :param transactiontype: The transactiontype of this SbpRequest.
        :type: str
        """
        self._transactiontype = transactiontype

    @property
    def udfield1(self):
        """
        Gets the udfield1 of this SbpRequest.


        :return: The udfield1 of this SbpRequest.
        :rtype: str
        """
        return self._udfield1

    @udfield1.setter
    def udfield1(self, udfield1):
        """
        Sets the udfield1 of this SbpRequest.


        :param udfield1: The udfield1 of this SbpRequest.
        :type: str
        """
        self._udfield1 = udfield1

    @property
    def udfield2(self):
        """
        Gets the udfield2 of this SbpRequest.


        :return: The udfield2 of this SbpRequest.
        :rtype: str
        """
        return self._udfield2

    @udfield2.setter
    def udfield2(self, udfield2):
        """
        Sets the udfield2 of this SbpRequest.


        :param udfield2: The udfield2 of this SbpRequest.
        :type: str
        """
        self._udfield2 = udfield2

    @property
    def udfield3(self):
        """
        Gets the udfield3 of this SbpRequest.


        :return: The udfield3 of this SbpRequest.
        :rtype: str
        """
        return self._udfield3

    @udfield3.setter
    def udfield3(self, udfield3):
        """
        Sets the udfield3 of this SbpRequest.


        :param udfield3: The udfield3 of this SbpRequest.
        :type: str
        """
        self._udfield3 = udfield3

    @property
    def zip(self):
        """
        Gets the zip of this SbpRequest.


        :return: The zip of this SbpRequest.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this SbpRequest.


        :param zip: The zip of this SbpRequest.
        :type: str
        """
        self._zip = zip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

