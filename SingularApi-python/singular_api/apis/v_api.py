# coding: utf-8

"""
VApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class VApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_report(self, sbp_query_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_report(sbp_query_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpQueryRequest sbp_query_request: SbpQueryRequest (required)
        :return: list[SbpQueryRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_query_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_query_request' is set
        if ('sbp_query_request' not in params) or (params['sbp_query_request'] is None):
            raise ValueError("Missing the required parameter `sbp_query_request` when calling `get_report`")

        resource_path = '/v1/Reports'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_query_request' in params:
            body_params = params['sbp_query_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[SbpQueryRequest]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_profile(self, sbp_profile, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_profile(sbp_profile, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpProfile sbp_profile: SbpProfile (required)
        :return: SbpProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_profile']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_profile" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_profile' is set
        if ('sbp_profile' not in params) or (params['sbp_profile'] is None):
            raise ValueError("Missing the required parameter `sbp_profile` when calling `create_profile`")

        resource_path = '/v1/profile/create'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_profile' in params:
            body_params = params['sbp_profile']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpProfile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_profile(self, sbp_profile, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_profile(sbp_profile, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpProfile sbp_profile: SbpProfile (required)
        :return: SbpProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_profile']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_profile" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_profile' is set
        if ('sbp_profile' not in params) or (params['sbp_profile'] is None):
            raise ValueError("Missing the required parameter `sbp_profile` when calling `delete_profile`")

        resource_path = '/v1/profile/delete'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_profile' in params:
            body_params = params['sbp_profile']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpProfile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def query_profile(self, sbp_query_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_profile(sbp_query_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpQueryRequest sbp_query_request: SbpQueryRequest (required)
        :return: list[SbpProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_query_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_profile" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_query_request' is set
        if ('sbp_query_request' not in params) or (params['sbp_query_request'] is None):
            raise ValueError("Missing the required parameter `sbp_query_request` when calling `query_profile`")

        resource_path = '/v1/profile/query'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_query_request' in params:
            body_params = params['sbp_query_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[SbpProfile]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cancel_recurring(self, sbp_recurring_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_recurring(sbp_recurring_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpRecurringRequest sbp_recurring_request: SbpRecurringRequest (required)
        :return: SbpRecurringRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_recurring_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_recurring" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_recurring_request' is set
        if ('sbp_recurring_request' not in params) or (params['sbp_recurring_request'] is None):
            raise ValueError("Missing the required parameter `sbp_recurring_request` when calling `cancel_recurring`")

        resource_path = '/v1/recurring/cancel'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_recurring_request' in params:
            body_params = params['sbp_recurring_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpRecurringRequest',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_recurring(self, sbp_recurring_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_recurring(sbp_recurring_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpRecurringRequest sbp_recurring_request: SbpRecurringRequest (required)
        :return: SbpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_recurring_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_recurring" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_recurring_request' is set
        if ('sbp_recurring_request' not in params) or (params['sbp_recurring_request'] is None):
            raise ValueError("Missing the required parameter `sbp_recurring_request` when calling `create_recurring`")

        resource_path = '/v1/recurring/create'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_recurring_request' in params:
            body_params = params['sbp_recurring_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def query_recurring(self, sbp_query_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_recurring(sbp_query_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpQueryRequest sbp_query_request: SbpQueryRequest (required)
        :return: list[SbpRecurringRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_query_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_recurring" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_query_request' is set
        if ('sbp_query_request' not in params) or (params['sbp_query_request'] is None):
            raise ValueError("Missing the required parameter `sbp_query_request` when calling `query_recurring`")

        resource_path = '/v1/recurring/query'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_query_request' in params:
            body_params = params['sbp_query_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[SbpRecurringRequest]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_status(self, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_status(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SbpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/v1/transaction'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_transaction(self, sbp_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_transaction(sbp_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpRequest sbp_request: SbpRequest (required)
        :return: SbpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_transaction" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_request' is set
        if ('sbp_request' not in params) or (params['sbp_request'] is None):
            raise ValueError("Missing the required parameter `sbp_request` when calling `post_transaction`")

        resource_path = '/v1/transaction'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_request' in params:
            body_params = params['sbp_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def authorize(self, sbp_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.authorize(sbp_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpRequest sbp_request: SbpRequest (required)
        :return: SbpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authorize" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_request' is set
        if ('sbp_request' not in params) or (params['sbp_request'] is None):
            raise ValueError("Missing the required parameter `sbp_request` when calling `authorize`")

        resource_path = '/v1/transaction/auth'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_request' in params:
            body_params = params['sbp_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def capture(self, sbp_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.capture(sbp_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpRequest sbp_request: SbpRequest (required)
        :return: SbpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method capture" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_request' is set
        if ('sbp_request' not in params) or (params['sbp_request'] is None):
            raise ValueError("Missing the required parameter `sbp_request` when calling `capture`")

        resource_path = '/v1/transaction/capture'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_request' in params:
            body_params = params['sbp_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def query_transaction(self, sbp_query_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_transaction(sbp_query_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpQueryRequest sbp_query_request: SbpQueryRequest (required)
        :return: list[SbpResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_query_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_transaction" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_query_request' is set
        if ('sbp_query_request' not in params) or (params['sbp_query_request'] is None):
            raise ValueError("Missing the required parameter `sbp_query_request` when calling `query_transaction`")

        resource_path = '/v1/transaction/query'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_query_request' in params:
            body_params = params['sbp_query_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[SbpResponse]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def refund(self, sbp_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refund(sbp_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpRequest sbp_request: SbpRequest (required)
        :return: SbpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_request' is set
        if ('sbp_request' not in params) or (params['sbp_request'] is None):
            raise ValueError("Missing the required parameter `sbp_request` when calling `refund`")

        resource_path = '/v1/transaction/refund'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_request' in params:
            body_params = params['sbp_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def void_transaction(self, sbp_request, **kwargs):
        """
        
        Please provide a description for the endpoint

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.void_transaction(sbp_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SbpRequest sbp_request: SbpRequest (required)
        :return: SbpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sbp_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method void_transaction" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'sbp_request' is set
        if ('sbp_request' not in params) or (params['sbp_request'] is None):
            raise ValueError("Missing the required parameter `sbp_request` when calling `void_transaction`")

        resource_path = '/v1/transaction/void'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'sbp_request' in params:
            body_params = params['sbp_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SbpResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
