<?php
/**
 * VApi
 * PHP version 5
 *
 * @category Class
 * @package  SingularApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace SingularApi\Api;

use \SingularApi\Configuration;
use \SingularApi\ApiClient;
use \SingularApi\ApiException;
use \SingularApi\ObjectSerializer;

/**
 * VApi Class Doc Comment
 *
 * @category Class
 * @package  SingularApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VApi
{

    /**
     * API Client
     * @var \SingularApi\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \SingularApi\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.singularbillpay.com');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \SingularApi\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \SingularApi\ApiClient $apiClient set the API client
     * @return VApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * getReport
     *
     * 
     *
     * @param \SingularApi\Model\SbpQueryRequest $sbp_query_request SbpQueryRequest (required)
     * @return \SingularApi\Model\SbpQueryRequest[]
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function getReport($sbp_query_request)
    {
        list($response, $statusCode, $httpHeader) = $this->getReportWithHttpInfo ($sbp_query_request);
        return $response; 
    }


    /**
     * getReportWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpQueryRequest $sbp_query_request SbpQueryRequest (required)
     * @return Array of \SingularApi\Model\SbpQueryRequest[], HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function getReportWithHttpInfo($sbp_query_request)
    {
        
        // verify the required parameter 'sbp_query_request' is set
        if ($sbp_query_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_query_request when calling getReport');
        }
  
        // parse inputs
        $resourcePath = "/v1/Reports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_query_request)) {
            $_tempBody = $sbp_query_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpQueryRequest[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpQueryRequest[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpQueryRequest[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createProfile
     *
     * 
     *
     * @param \SingularApi\Model\SbpProfile $sbp_profile SbpProfile (required)
     * @return \SingularApi\Model\SbpProfile
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function createProfile($sbp_profile)
    {
        list($response, $statusCode, $httpHeader) = $this->createProfileWithHttpInfo ($sbp_profile);
        return $response; 
    }


    /**
     * createProfileWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpProfile $sbp_profile SbpProfile (required)
     * @return Array of \SingularApi\Model\SbpProfile, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function createProfileWithHttpInfo($sbp_profile)
    {
        
        // verify the required parameter 'sbp_profile' is set
        if ($sbp_profile === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_profile when calling createProfile');
        }
  
        // parse inputs
        $resourcePath = "/v1/profile/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_profile)) {
            $_tempBody = $sbp_profile;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpProfile'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpProfile', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpProfile', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteProfile
     *
     * 
     *
     * @param \SingularApi\Model\SbpProfile $sbp_profile SbpProfile (required)
     * @return \SingularApi\Model\SbpProfile
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function deleteProfile($sbp_profile)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteProfileWithHttpInfo ($sbp_profile);
        return $response; 
    }


    /**
     * deleteProfileWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpProfile $sbp_profile SbpProfile (required)
     * @return Array of \SingularApi\Model\SbpProfile, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function deleteProfileWithHttpInfo($sbp_profile)
    {
        
        // verify the required parameter 'sbp_profile' is set
        if ($sbp_profile === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_profile when calling deleteProfile');
        }
  
        // parse inputs
        $resourcePath = "/v1/profile/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_profile)) {
            $_tempBody = $sbp_profile;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpProfile'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpProfile', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpProfile', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * queryProfile
     *
     * 
     *
     * @param \SingularApi\Model\SbpQueryRequest $sbp_query_request SbpQueryRequest (required)
     * @return \SingularApi\Model\SbpProfile[]
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function queryProfile($sbp_query_request)
    {
        list($response, $statusCode, $httpHeader) = $this->queryProfileWithHttpInfo ($sbp_query_request);
        return $response; 
    }


    /**
     * queryProfileWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpQueryRequest $sbp_query_request SbpQueryRequest (required)
     * @return Array of \SingularApi\Model\SbpProfile[], HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function queryProfileWithHttpInfo($sbp_query_request)
    {
        
        // verify the required parameter 'sbp_query_request' is set
        if ($sbp_query_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_query_request when calling queryProfile');
        }
  
        // parse inputs
        $resourcePath = "/v1/profile/query";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_query_request)) {
            $_tempBody = $sbp_query_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpProfile[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpProfile[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpProfile[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cancelRecurring
     *
     * 
     *
     * @param \SingularApi\Model\SbpRecurringRequest $sbp_recurring_request SbpRecurringRequest (required)
     * @return \SingularApi\Model\SbpRecurringRequest
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function cancelRecurring($sbp_recurring_request)
    {
        list($response, $statusCode, $httpHeader) = $this->cancelRecurringWithHttpInfo ($sbp_recurring_request);
        return $response; 
    }


    /**
     * cancelRecurringWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpRecurringRequest $sbp_recurring_request SbpRecurringRequest (required)
     * @return Array of \SingularApi\Model\SbpRecurringRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function cancelRecurringWithHttpInfo($sbp_recurring_request)
    {
        
        // verify the required parameter 'sbp_recurring_request' is set
        if ($sbp_recurring_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_recurring_request when calling cancelRecurring');
        }
  
        // parse inputs
        $resourcePath = "/v1/recurring/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_recurring_request)) {
            $_tempBody = $sbp_recurring_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpRecurringRequest'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpRecurringRequest', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpRecurringRequest', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createRecurring
     *
     * 
     *
     * @param \SingularApi\Model\SbpRecurringRequest $sbp_recurring_request SbpRecurringRequest (required)
     * @return \SingularApi\Model\SbpResponse
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function createRecurring($sbp_recurring_request)
    {
        list($response, $statusCode, $httpHeader) = $this->createRecurringWithHttpInfo ($sbp_recurring_request);
        return $response; 
    }


    /**
     * createRecurringWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpRecurringRequest $sbp_recurring_request SbpRecurringRequest (required)
     * @return Array of \SingularApi\Model\SbpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function createRecurringWithHttpInfo($sbp_recurring_request)
    {
        
        // verify the required parameter 'sbp_recurring_request' is set
        if ($sbp_recurring_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_recurring_request when calling createRecurring');
        }
  
        // parse inputs
        $resourcePath = "/v1/recurring/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_recurring_request)) {
            $_tempBody = $sbp_recurring_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * queryRecurring
     *
     * 
     *
     * @param \SingularApi\Model\SbpQueryRequest $sbp_query_request SbpQueryRequest (required)
     * @return \SingularApi\Model\SbpRecurringRequest[]
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function queryRecurring($sbp_query_request)
    {
        list($response, $statusCode, $httpHeader) = $this->queryRecurringWithHttpInfo ($sbp_query_request);
        return $response; 
    }


    /**
     * queryRecurringWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpQueryRequest $sbp_query_request SbpQueryRequest (required)
     * @return Array of \SingularApi\Model\SbpRecurringRequest[], HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function queryRecurringWithHttpInfo($sbp_query_request)
    {
        
        // verify the required parameter 'sbp_query_request' is set
        if ($sbp_query_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_query_request when calling queryRecurring');
        }
  
        // parse inputs
        $resourcePath = "/v1/recurring/query";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_query_request)) {
            $_tempBody = $sbp_query_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpRecurringRequest[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpRecurringRequest[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpRecurringRequest[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getStatus
     *
     * 
     *
     * @return \SingularApi\Model\SbpResponse
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function getStatus()
    {
        list($response, $statusCode, $httpHeader) = $this->getStatusWithHttpInfo ();
        return $response; 
    }


    /**
     * getStatusWithHttpInfo
     *
     * 
     *
     * @return Array of \SingularApi\Model\SbpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function getStatusWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/v1/transaction";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postTransaction
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return \SingularApi\Model\SbpResponse
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function postTransaction($sbp_request)
    {
        list($response, $statusCode, $httpHeader) = $this->postTransactionWithHttpInfo ($sbp_request);
        return $response; 
    }


    /**
     * postTransactionWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return Array of \SingularApi\Model\SbpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function postTransactionWithHttpInfo($sbp_request)
    {
        
        // verify the required parameter 'sbp_request' is set
        if ($sbp_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_request when calling postTransaction');
        }
  
        // parse inputs
        $resourcePath = "/v1/transaction";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_request)) {
            $_tempBody = $sbp_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * authorize
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return \SingularApi\Model\SbpResponse
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function authorize($sbp_request)
    {
        list($response, $statusCode, $httpHeader) = $this->authorizeWithHttpInfo ($sbp_request);
        return $response; 
    }


    /**
     * authorizeWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return Array of \SingularApi\Model\SbpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function authorizeWithHttpInfo($sbp_request)
    {
        
        // verify the required parameter 'sbp_request' is set
        if ($sbp_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_request when calling authorize');
        }
  
        // parse inputs
        $resourcePath = "/v1/transaction/auth";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_request)) {
            $_tempBody = $sbp_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * capture
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return \SingularApi\Model\SbpResponse
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function capture($sbp_request)
    {
        list($response, $statusCode, $httpHeader) = $this->captureWithHttpInfo ($sbp_request);
        return $response; 
    }


    /**
     * captureWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return Array of \SingularApi\Model\SbpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function captureWithHttpInfo($sbp_request)
    {
        
        // verify the required parameter 'sbp_request' is set
        if ($sbp_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_request when calling capture');
        }
  
        // parse inputs
        $resourcePath = "/v1/transaction/capture";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_request)) {
            $_tempBody = $sbp_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * queryTransaction
     *
     * 
     *
     * @param \SingularApi\Model\SbpQueryRequest $sbp_query_request SbpQueryRequest (required)
     * @return \SingularApi\Model\SbpResponse[]
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function queryTransaction($sbp_query_request)
    {
        list($response, $statusCode, $httpHeader) = $this->queryTransactionWithHttpInfo ($sbp_query_request);
        return $response; 
    }


    /**
     * queryTransactionWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpQueryRequest $sbp_query_request SbpQueryRequest (required)
     * @return Array of \SingularApi\Model\SbpResponse[], HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function queryTransactionWithHttpInfo($sbp_query_request)
    {
        
        // verify the required parameter 'sbp_query_request' is set
        if ($sbp_query_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_query_request when calling queryTransaction');
        }
  
        // parse inputs
        $resourcePath = "/v1/transaction/query";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_query_request)) {
            $_tempBody = $sbp_query_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpResponse[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpResponse[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpResponse[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * refund
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return \SingularApi\Model\SbpResponse
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function refund($sbp_request)
    {
        list($response, $statusCode, $httpHeader) = $this->refundWithHttpInfo ($sbp_request);
        return $response; 
    }


    /**
     * refundWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return Array of \SingularApi\Model\SbpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function refundWithHttpInfo($sbp_request)
    {
        
        // verify the required parameter 'sbp_request' is set
        if ($sbp_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_request when calling refund');
        }
  
        // parse inputs
        $resourcePath = "/v1/transaction/refund";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_request)) {
            $_tempBody = $sbp_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * voidTransaction
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return \SingularApi\Model\SbpResponse
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function voidTransaction($sbp_request)
    {
        list($response, $statusCode, $httpHeader) = $this->voidTransactionWithHttpInfo ($sbp_request);
        return $response; 
    }


    /**
     * voidTransactionWithHttpInfo
     *
     * 
     *
     * @param \SingularApi\Model\SbpRequest $sbp_request SbpRequest (required)
     * @return Array of \SingularApi\Model\SbpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \SingularApi\ApiException on non-2xx response
     */
    public function voidTransactionWithHttpInfo($sbp_request)
    {
        
        // verify the required parameter 'sbp_request' is set
        if ($sbp_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sbp_request when calling voidTransaction');
        }
  
        // parse inputs
        $resourcePath = "/v1/transaction/void";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($sbp_request)) {
            $_tempBody = $sbp_request;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\SingularApi\Model\SbpResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\SingularApi\ObjectSerializer::deserialize($response, '\SingularApi\Model\SbpResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \SingularApi\ObjectSerializer::deserialize($e->getResponseBody(), '\SingularApi\Model\SbpResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
