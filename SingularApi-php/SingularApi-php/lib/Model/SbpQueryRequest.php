<?php
/**
 * SbpQueryRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  SingularApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SingularApi\Model;

use \ArrayAccess;
/**
 * SbpQueryRequest Class Doc Comment
 *
 * @category    Class
 * @description Model for SbpQueryRequest
 * @package     SingularApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SbpQueryRequest implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'fromdate' => 'string',
        'orderid' => 'string',
        'partnerid' => 'string',
        'partnerkey' => 'string',
        'payeeid' => 'string',
        'profileid' => 'string',
        'todate' => 'string',
        'transactionreference' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'fromdate' => 'fromdate',
        'orderid' => 'orderid',
        'partnerid' => 'partnerid',
        'partnerkey' => 'partnerkey',
        'payeeid' => 'payeeid',
        'profileid' => 'profileid',
        'todate' => 'todate',
        'transactionreference' => 'transactionreference'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'fromdate' => 'setFromdate',
        'orderid' => 'setOrderid',
        'partnerid' => 'setPartnerid',
        'partnerkey' => 'setPartnerkey',
        'payeeid' => 'setPayeeid',
        'profileid' => 'setProfileid',
        'todate' => 'setTodate',
        'transactionreference' => 'setTransactionreference'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'fromdate' => 'getFromdate',
        'orderid' => 'getOrderid',
        'partnerid' => 'getPartnerid',
        'partnerkey' => 'getPartnerkey',
        'payeeid' => 'getPayeeid',
        'profileid' => 'getProfileid',
        'todate' => 'getTodate',
        'transactionreference' => 'getTransactionreference'
    );
  
    
    /**
      * $fromdate 
      * @var string
      */
    protected $fromdate;
    
    /**
      * $orderid 
      * @var string
      */
    protected $orderid;
    
    /**
      * $partnerid 
      * @var string
      */
    protected $partnerid;
    
    /**
      * $partnerkey 
      * @var string
      */
    protected $partnerkey;
    
    /**
      * $payeeid 
      * @var string
      */
    protected $payeeid;
    
    /**
      * $profileid 
      * @var string
      */
    protected $profileid;
    
    /**
      * $todate 
      * @var string
      */
    protected $todate;
    
    /**
      * $transactionreference 
      * @var string
      */
    protected $transactionreference;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->fromdate = $data["fromdate"];
            $this->orderid = $data["orderid"];
            $this->partnerid = $data["partnerid"];
            $this->partnerkey = $data["partnerkey"];
            $this->payeeid = $data["payeeid"];
            $this->profileid = $data["profileid"];
            $this->todate = $data["todate"];
            $this->transactionreference = $data["transactionreference"];
        }
    }
    
    /**
     * Gets fromdate
     * @return string
     */
    public function getFromdate()
    {
        return $this->fromdate;
    }
  
    /**
     * Sets fromdate
     * @param string $fromdate 
     * @return $this
     */
    public function setFromdate($fromdate)
    {
        
        $this->fromdate = $fromdate;
        return $this;
    }
    
    /**
     * Gets orderid
     * @return string
     */
    public function getOrderid()
    {
        return $this->orderid;
    }
  
    /**
     * Sets orderid
     * @param string $orderid 
     * @return $this
     */
    public function setOrderid($orderid)
    {
        
        $this->orderid = $orderid;
        return $this;
    }
    
    /**
     * Gets partnerid
     * @return string
     */
    public function getPartnerid()
    {
        return $this->partnerid;
    }
  
    /**
     * Sets partnerid
     * @param string $partnerid 
     * @return $this
     */
    public function setPartnerid($partnerid)
    {
        
        $this->partnerid = $partnerid;
        return $this;
    }
    
    /**
     * Gets partnerkey
     * @return string
     */
    public function getPartnerkey()
    {
        return $this->partnerkey;
    }
  
    /**
     * Sets partnerkey
     * @param string $partnerkey 
     * @return $this
     */
    public function setPartnerkey($partnerkey)
    {
        
        $this->partnerkey = $partnerkey;
        return $this;
    }
    
    /**
     * Gets payeeid
     * @return string
     */
    public function getPayeeid()
    {
        return $this->payeeid;
    }
  
    /**
     * Sets payeeid
     * @param string $payeeid 
     * @return $this
     */
    public function setPayeeid($payeeid)
    {
        
        $this->payeeid = $payeeid;
        return $this;
    }
    
    /**
     * Gets profileid
     * @return string
     */
    public function getProfileid()
    {
        return $this->profileid;
    }
  
    /**
     * Sets profileid
     * @param string $profileid 
     * @return $this
     */
    public function setProfileid($profileid)
    {
        
        $this->profileid = $profileid;
        return $this;
    }
    
    /**
     * Gets todate
     * @return string
     */
    public function getTodate()
    {
        return $this->todate;
    }
  
    /**
     * Sets todate
     * @param string $todate 
     * @return $this
     */
    public function setTodate($todate)
    {
        
        $this->todate = $todate;
        return $this;
    }
    
    /**
     * Gets transactionreference
     * @return string
     */
    public function getTransactionreference()
    {
        return $this->transactionreference;
    }
  
    /**
     * Sets transactionreference
     * @param string $transactionreference 
     * @return $this
     */
    public function setTransactionreference($transactionreference)
    {
        
        $this->transactionreference = $transactionreference;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\SingularApi\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\SingularApi\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
